{"version":3,"file":"155.js","sources":["webpack:///./components/organisms/v2/SignUp/Step1.vue?cd30","webpack:///components/organisms/v2/SignUp/Step1.vue","webpack:///./components/organisms/v2/SignUp/Step1.vue?c5e6","webpack:///./components/organisms/v2/SignUp/Step1.vue","webpack:///./assets/images/Auth/google.svg"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"xo-signup-step-1 step-content row\"},[_vm._ssrNode(\"<div class=\\\"left-content row items-center justify-center\\\">\",\"</div>\",[_vm._ssrNode(\"<div class=\\\"form-container\\\">\",\"</div>\",[_vm._ssrNode(\"<div class=\\\"form-header\\\">\",\"</div>\",[_vm._ssrNode(\"<h1>\"+_vm._ssrEscape(_vm._s(_vm.signupLockerRoomSupporting ? 'Sign up to support a club' : 'Sign up'))+\"</h1>\"),_vm._ssrNode(\"<h4 class=\\\"text-weight-light\\\">\",\"</h4>\",[_vm._ssrNode(\"Already have an account? \"),_c('nuxt-link',{attrs:{\"to\":{ name: 'signin', query: _vm.filteredQuery, params: _vm.$route.params }}},[_vm._v(\"Sign in\")])],2)],2),_vm._ssrNode(\"<form action=\\\"#\\\">\",\"</form>\",[_vm._ssrNode(\"<div class=\\\"mb-5\\\">\",\"</div>\",[_c('XAFormsInput',{attrs:{\"id\":\"IUsername\",\"placeholder\":\"Username\",\"disabled\":_vm.isSubmitting,\"loading\":_vm.isChecking,\"error\":_vm.validation.firstError('username') || _vm.usernameUniqueError},on:{\"enter\":function($event){return _vm.fnSignupViaEmail()},\"input\":function($event){return _vm.fnUsernameValidation()}},model:{value:(_vm.username),callback:function ($$v) {_vm.username=$$v},expression:\"username\"}})],1),_vm._ssrNode(\"<div class=\\\"mb-5\\\">\",\"</div>\",[_c('XAFormsInput',{attrs:{\"id\":\"IEmail\",\"placeholder\":\"Email\",\"disabled\":_vm.isSubmitting || _vm.isDisableInputEmail,\"error\":_vm.validation.firstError('email')},on:{\"enter\":function($event){return _vm.fnSignupViaEmail()}},model:{value:(_vm.email),callback:function ($$v) {_vm.email=$$v},expression:\"email\"}})],1),_vm._ssrNode(\"<div class=\\\"mb-6\\\">\",\"</div>\",[_c('XAFormsInput',{attrs:{\"id\":\"IPassword\",\"type\":\"password\",\"placeholder\":\"Password\",\"disabled\":_vm.isSubmitting,\"error\":_vm.validation.firstError('password')},on:{\"enter\":function($event){return _vm.fnSignupViaEmail()}},model:{value:(_vm.password),callback:function ($$v) {_vm.password=$$v},expression:\"password\"}})],1),_vm._ssrNode(\"<div class=\\\"actions\\\">\",\"</div>\",[_vm._ssrNode(\"<div class=\\\"mb-4\\\">\",\"</div>\",[_c('b-button',{staticClass:\"btn-next\",attrs:{\"type\":\"is-primary\",\"loading\":_vm.isSubmitting,\"disabled\":_vm.isDisableSignUpButton},on:{\"click\":function($event){$event.preventDefault();return _vm.fnSignupViaEmail()}}},[_vm._v(\"Sign Up\")])],1),_vm._ssrNode(\"<div class=\\\"row\\\"><div\"+(_vm._ssrClass(\"btn-google row items-center justify-center\",[_vm.isSubmitting && 'disabled']))+\"><div class=\\\"_icon row\\\"><img\"+(_vm._ssrAttr(\"src\",require(\"assets/images/Auth/google.svg\")))+\"></div><div class=\\\"value\\\">Sign Up with Google</div></div></div>\")],2)])])]),_c('XMSignUpRightContent')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template lang=\"pug\">\r\n.xo-signup-step-1.step-content.row\r\n  .left-content.row.items-center.justify-center\r\n    .form-container\r\n      .form-header\r\n        h1 {{ signupLockerRoomSupporting ? 'Sign up to support a club' : 'Sign up' }}\r\n        h4.text-weight-light Already have an account? #[nuxt-link(:to=\"{ name: 'signin', query: filteredQuery, params: $route.params }\") Sign in]\r\n\r\n      form(action=\"#\", @submit.prevent=\"\")\r\n        .mb-5: XAFormsInput#IUsername(\r\n          v-model=\"username\",\r\n          placeholder=\"Username\",\r\n          :disabled=\"isSubmitting\",\r\n          @enter=\"fnSignupViaEmail()\",\r\n          @input=\"fnUsernameValidation()\",\r\n          :loading=\"isChecking\",\r\n          :error=\"validation.firstError('username') || usernameUniqueError\"\r\n        )\r\n\r\n        .mb-5: XAFormsInput#IEmail(\r\n          v-model=\"email\",\r\n          placeholder=\"Email\",\r\n          :disabled=\"isSubmitting || isDisableInputEmail\",\r\n          @enter=\"fnSignupViaEmail()\",\r\n          :error=\"validation.firstError('email')\"\r\n        )\r\n\r\n        .mb-6: XAFormsInput#IPassword(\r\n          v-model=\"password\",\r\n          type=\"password\",\r\n          placeholder=\"Password\",\r\n          :disabled=\"isSubmitting\",\r\n          @enter=\"fnSignupViaEmail()\",\r\n          :error=\"validation.firstError('password')\"\r\n        )\r\n\r\n        .actions\r\n          .mb-4: b-button.btn-next(\r\n            type=\"is-primary\",\r\n            :loading=\"isSubmitting\",\r\n            :disabled=\"isDisableSignUpButton\",\r\n            @click.prevent=\"fnSignupViaEmail()\"\r\n          ) Sign Up\r\n\r\n          .row\r\n            .btn-google.row.items-center.justify-center(\r\n              :class=\"[isSubmitting && 'disabled']\",\r\n              @click.prevent=\"fnSignupViaGoogle()\"\r\n            )\r\n              ._icon.row: img(src=\"~assets/images/Auth/google.svg\")\r\n              .value Sign Up with Google\r\n            //- .btn-apple.row.items-center.justify-center: img(\r\n            //-   src=\"~assets/images/Auth/apple.svg\"\r\n            //- )\r\n  XMSignUpRightContent\r\n</template>\r\n\r\n<script>\r\nimport debounce from 'lodash/debounce'\r\nimport { Validator } from 'simple-vue-validator'\r\nimport { mapFields } from 'vuex-map-fields'\r\nimport { mapActions } from 'vuex'\r\n\r\nexport default {\r\n  validators: {\r\n    username(value) {\r\n      return Validator.value(value)\r\n        .required('Sorry, a username is required')\r\n        .custom(() => {\r\n          if (!/^\\w+$/.test(value)) {\r\n            return 'Please use only letters, numbers and underscores for your username'\r\n          }\r\n        })\r\n        .minLength(\r\n          3,\r\n          'Please ensure your username is between 3 to 18 characters in length'\r\n        )\r\n        .maxLength(\r\n          18,\r\n          'Please ensure your username is between 3 to 18 characters in length'\r\n        )\r\n    },\r\n    email(value) {\r\n      return Validator.value(value)\r\n        .required('Sorry, we need a email to send you important updates')\r\n        .email(`Hmmm, that email doesn't look right, maybe try again?`)\r\n    },\r\n    password(value) {\r\n      return Validator.value(value)\r\n        .required('Sorry, please enter a secure password')\r\n        .custom(() => {\r\n          if (\r\n            !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~])[A-Za-z\\d!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~]{8,}$/.test(\r\n              value\r\n            )\r\n          ) {\r\n            return 'Please ensure your password is at least 8 characters in length, and contains one number, upper and lowercase letters and one special character'\r\n          }\r\n        })\r\n    },\r\n  },\r\n  name: 'XOSignUpStep1',\r\n  components: {\r\n    XAFormsInput: () => import('~/components/atoms/Forms/Input'),\r\n    XMSignUpRightContent: () =>\r\n      import('~/components/molecules/SignUp/RightContent'),\r\n  },\r\n  data() {\r\n    return {\r\n      isSubmitting: false,\r\n      isChecking: false,\r\n      usernameUniqueError: null,\r\n      filteredQuery: {}\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapFields('signup', [\r\n      'username',\r\n      'email',\r\n      'password',\r\n      'firstName',\r\n      'lastName',\r\n      'avatarSocial',\r\n      'signupLockerRoomSupporting',\r\n      'signupOwnerManagerInvite',\r\n      'signupMethod',\r\n    ]),\r\n    isDisableSignUpButton() {\r\n      return (\r\n        !this.username ||\r\n        !this.email ||\r\n        !this.password ||\r\n        this.usernameUniqueError\r\n      )\r\n    },\r\n    isDisableInputEmail() {\r\n      return !!this.signupOwnerManagerInvite\r\n    },\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      authSignupWithEmail: 'auth/authSignupWithEmail',\r\n      authLoginWithGoogle: 'auth/authLoginWithGoogle',\r\n      authLogOut: 'auth/authLogOut',\r\n    }),\r\n    fnUsernameValidation: debounce(async function () {\r\n      if (!this.username) return\r\n      this.isChecking = true\r\n      try {\r\n        const { username } = this\r\n        const { userNameExists } = await this.$api.userNameExists({ username })\r\n        if (userNameExists) {\r\n          this.usernameUniqueError = 'Username already exists.'\r\n          return\r\n        }\r\n        this.usernameUniqueError = null\r\n      } catch (error) {\r\n        error?.response?.errors.forEach((error) => {\r\n          this.$toast.success(error.message, {\r\n            duration: 5000,\r\n            position: 'bottom-left',\r\n            className: 'fx1-success',\r\n            iconPack: 'mdi',\r\n            icon: 'alert-circle-outline',\r\n          })\r\n        })\r\n      } finally {\r\n        this.isChecking = false\r\n      }\r\n    }, 300),\r\n    fnSignupViaEmail() {\r\n      this.isSubmitting = true\r\n      this.signupMethod = 'email'\r\n      this.$validate().then(async (success) => {\r\n        if (success) {\r\n          const { email, password } = this\r\n          try {\r\n            const result = await this.authSignupWithEmail({ email, password })\r\n\r\n            if (result?.additionalUserInfo?.isNewUser) {\r\n              await this.$router.push({\r\n                name: 'signup',\r\n                query: {...this.$route.query, step: 2},\r\n                params: {...this.$route.params},\r\n              })\r\n              return\r\n            }\r\n\r\n            this.$toast.error(\r\n              'Sorry, this email address is already in use. Please try another.',\r\n              {\r\n                duration: 5000,\r\n                position: 'top-center',\r\n              }\r\n            )\r\n            await this.authLogOut()\r\n          } catch (e) {\r\n            const message = e.toString()\r\n            const findError = (error) => {\r\n              if (message.includes(error)) {\r\n                return message\r\n              }\r\n            }\r\n\r\n            switch (message) {\r\n              case findError('email-already-in-use'):\r\n                this.$toast.error(\r\n                  'Sorry, this email address is already in use. Please try another.',\r\n                  {\r\n                    duration: 5000,\r\n                    position: 'top-center',\r\n                  }\r\n                )\r\n                break\r\n\r\n              default:\r\n                break\r\n            }\r\n          } finally {\r\n            this.isSubmitting = false\r\n          }\r\n        } else {\r\n          this.isSubmitting = false\r\n        }\r\n      })\r\n    },\r\n    async fnSignupViaGoogle() {\r\n      this.validation.reset()\r\n      this.isSubmitting = true\r\n      this.signupMethod = 'google'\r\n\r\n      try {\r\n        const result = await this.authLoginWithGoogle()\r\n        if (!result) return\r\n        if (result?.additionalUserInfo?.isNewUser) {\r\n          const {\r\n            additionalUserInfo: {\r\n              // eslint-disable-next-line camelcase\r\n              profile: { family_name, given_name, picture, email },\r\n            },\r\n          } = result\r\n\r\n          this.email = email\r\n          // eslint-disable-next-line camelcase\r\n          this.firstName = given_name\r\n          // eslint-disable-next-line camelcase\r\n          this.lastName = family_name\r\n          this.avatarSocial = picture\r\n\r\n          this.$router.push({\r\n            name: 'signup',\r\n            query: { ...this.$route.query, step: 2 },\r\n            params: { ...this.$route.params },\r\n          })\r\n          return\r\n        }\r\n\r\n        this.$toast.error(\r\n          'Sorry, this email address is already in use. Please try another.',\r\n          {\r\n            duration: 5000,\r\n            position: 'top-center',\r\n          }\r\n        )\r\n        this.authLogOut()\r\n      } catch (error) {\r\n        error?.response?.errors.forEach((error) => {\r\n          this.$toast.success(error.message, {\r\n            duration: 5000,\r\n            position: 'bottom-left',\r\n            className: 'fx1-success',\r\n            iconPack: 'mdi',\r\n            icon: 'alert-circle-outline',\r\n          })\r\n        })\r\n      } finally {\r\n        this.isSubmitting = false\r\n      }\r\n    },\r\n  },\r\n}\r\n</script>\r\n","import mod from \"-!../../../../node_modules/babel-loader/lib/index.js??ref--2-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Step1.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/babel-loader/lib/index.js??ref--2-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Step1.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Step1.vue?vue&type=template&id=e0697e1a&lang=pug&\"\nimport script from \"./Step1.vue?vue&type=script&lang=js&\"\nexport * from \"./Step1.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"217fd568\"\n  \n)\n\nexport default component.exports","module.exports = __webpack_public_path__ + \"img/google.605f953.svg\";"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACwDA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AASA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxRA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClBA;;;;A","sourceRoot":""}