{"version":3,"file":"137.js","sources":["webpack:///./components/organisms/ExploreEvent/ChatBody.vue?e50c","webpack:///./components/organisms/ExploreEvent/ChatBody.vue?6c2e","webpack:///./components/organisms/ExploreEvent/ChatBody.vue?82da","webpack:///components/organisms/ExploreEvent/ChatBody.vue","webpack:///./components/organisms/ExploreEvent/ChatBody.vue?9ed8","webpack:///./components/organisms/ExploreEvent/ChatBody.vue","webpack:///./components/organisms/ExploreEvent/ChatBody.vue?6ffe"],"sourcesContent":["export * from \"-!../../../node_modules/vue-style-loader/index.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--7-oneOf-1-3!../../../node_modules/sass-resources-loader/lib/loader.js??ref--7-oneOf-1-4!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ChatBody.vue?vue&type=style&index=0&id=79267fee&prod&lang=scss&scoped=true&\"","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(false);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".xp-locker-room-channels[data-v-79267fee]{height:100%}.show .unsupported[data-v-79267fee]{width:100%;display:flex;flex-direction:column;padding:12px 16px;position:absolute;bottom:0}.show .unsupported .unsupported-btn[data-v-79267fee]{display:flex;align-items:center;justify-content:center;height:40px;background:#f85454;color:#fff;cursor:pointer;border-radius:5px;margin-bottom:16px}.show .unsupported span[data-v-79267fee]{font-style:normal;font-weight:400;font-size:13px;color:#c3cdcf}\", \"\"]);\n// Exports\nmodule.exports = ___CSS_LOADER_EXPORT___;\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"xp-locker-room-channels row col\"},[_c('client-only',[(!_vm.getLockerRoomIsLoading && _vm.pageLoaded)?[_c('XTLockerRoomSupported',{attrs:{\"channelSlug\":_vm.channelSlug,\"game\":_vm.game,\"activeChat\":_vm.activeChat,\"currentStep\":_vm.currentStep,\"privateChats\":_vm.privateChats,\"privateChannel\":_vm.privateChannel,\"lockerRoom\":_vm.lockerRoom || _vm.lockerRoomProp,\"onlineMembers\":_vm.onlineMembers,\"publicMembers\":_vm.publicMembers},on:{\"cancel\":_vm.cancel,\"changeStep\":_vm.changeStep,\"getPrivateChannel\":_vm.fnGetPrivateChannel}}),(!_vm.isLoggedIn)?_c('div',{staticClass:\"unsupported\",on:{\"click\":_vm.signUp}},[_c('div',{staticClass:\"unsupported-btn\"},[_vm._v(\"LOG IN\")]),_c('span',[_vm._v(\"Login or sign up to send messages!\")])]):_vm._e()]:_vm._e()],2)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template lang=\"pug\">\r\n.xp-locker-room-channels.row.col\r\n    client-only\r\n      template(v-if=\"!getLockerRoomIsLoading && pageLoaded\")\r\n        XTLockerRoomSupported(\r\n          :channelSlug=\"channelSlug\",\r\n          :game=\"game\",\r\n          :activeChat=\"activeChat\",\r\n          :currentStep=\"currentStep\",\r\n          :privateChats=\"privateChats\",\r\n          :privateChannel=\"privateChannel\",\r\n          :lockerRoom=\"lockerRoom || lockerRoomProp\",\r\n          :onlineMembers=\"onlineMembers\"\r\n          :publicMembers=\"publicMembers\",\r\n          @cancel=\"cancel\",\r\n          @changeStep=\"changeStep\",\r\n          @getPrivateChannel=\"fnGetPrivateChannel\"\r\n        )\r\n        .unsupported(v-if=\"!isLoggedIn\", @click=\"signUp\")\r\n          .unsupported-btn LOG IN\r\n          span Login or sign up to send messages!\r\n</template>\r\n\r\n<script>\r\nimport {v4 as uuidv4} from 'uuid'\r\nimport {mapFields} from 'vuex-map-fields'\r\nimport {mapGetters, mapActions} from 'vuex'\r\nimport map from 'lodash/map'\r\nimport findIndex from 'lodash/findIndex'\r\nimport {hideAll} from \"tippy.js\";\r\n\r\nexport default {\r\n  name: 'PageLockerRoomChannels',\r\n  components: {\r\n    XTLockerRoomSupported: () =>\r\n      import('~/components/templates/LockerRoom/EventRoomChat'),\r\n  },\r\n  layout: 'locker-room',\r\n  props: {\r\n    channelSlug: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n    game: {\r\n      type: Object,\r\n      default: () => {\r\n      },\r\n    },\r\n    privateChannel: {\r\n      type: Object,\r\n      default: () => {\r\n      },\r\n    },\r\n    activeChat: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    currentStep: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n    lockerRoomProp: {\r\n      type: Object, default: () => {\r\n      }\r\n    },\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      socket: null,\r\n      pageLoaded: false,\r\n      myEmitErrors: {},\r\n      channel: null,\r\n      oldChannel: null,\r\n      isSupported: true,\r\n      lockerRoom: null,\r\n      chats: [],\r\n      privateChats: [],\r\n      usersTyping: [],\r\n      onlineMembers: [],\r\n      publicMembers: [],\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapFields('locker-room', ['lockerRoomActive', 'lockerRoomReply']),\r\n    ...mapFields('user', ['userID','userName', 'userAvatar']),\r\n    ...mapFields('channels', ['channelActive']),\r\n    ...mapFields('app', ['showLoader']),\r\n    ...mapFields('chats', ['unread', 'mode']),\r\n    ...mapGetters({\r\n      getMediaFilesLocal: 'media/getMediaFilesLocal',\r\n      getLockerRoomIsLoading: 'lockerRoom/getLockerRoomIsLoading',\r\n      selectedGif: 'giphy/getSelectedGif'\r\n    }),\r\n    activeChannelSlug() {\r\n      return this.activeChat === 'public'\r\n        ? this.channelSlug\r\n        : this.privateChannel?.slug\r\n    }\r\n  },\r\n  watch: {\r\n    selectedGif() {\r\n      if (this.selectedGif && this.userID) {\r\n        this.fnSendMessage(null, this.lockerRoomReply)\r\n        this.$store.dispatch('locker-room/setLockerRoomReply', null)\r\n      }\r\n    },\r\n    lockerRoomActive: {\r\n      deep: true,\r\n      handler(value) {\r\n        this.isSupported = this.isSupported || value?.isSupported\r\n      },\r\n    },\r\n    activeChat: {\r\n      deep: true,\r\n      handler() {\r\n        this.fnConnectToChannel()\r\n      },\r\n    },\r\n    $route: {\r\n      deep: true,\r\n      immediate: true,\r\n      handler() {\r\n        this.$root.$emit('evtRtCancelEdit')\r\n        this.clearChatDeleted()\r\n      },\r\n    },\r\n  },\r\n  mounted() {\r\n    this.socket = this.$nuxtSocket({\r\n      channel: '/',\r\n      auth: {\r\n        token: this.$store.state.auth.token || null,\r\n        type: 'desktop',\r\n      },\r\n      transports: ['websocket'],\r\n    })\r\n    this.$root.$on(\r\n      'evtRtSendMessage',\r\n      (message, reply, media, mentionsUserIDs) => {\r\n        this.fnSendMessage(message, reply, media, mentionsUserIDs)\r\n        this.unread = false\r\n      }\r\n    )\r\n\r\n    this.$root.$on('evtRtEditMessage', (data) => {\r\n      this.fnEditMessage(data)\r\n    })\r\n\r\n    this.$root.$on('evtRtDeleteMessage', (data) => {\r\n      this.fnDeleteMessage(data)\r\n    })\r\n\r\n    this.$root.$on('leavePrtChat', (data) => {\r\n      this.fnLeavePrivateChat(data)\r\n    })\r\n\r\n    // RECEIVED MESSAGE\r\n    this.socket.on('on-message', (data) => {\r\n      const {chat} = data\r\n      if (chat.channelSlug === this.channelSlug) {\r\n        this.chats.push(data.chat)\r\n      } else if (chat.channelSlug === this.privateChannel?.slug) {\r\n        this.privateChats.push(data.chat)\r\n        if (this.mode === 'video') {\r\n          this.unread = true\r\n        }\r\n      }\r\n    })\r\n\r\n    // EDIT MESSAGE\r\n    this.socket.on('on-edit-message', (data) => {\r\n      if (!data.chat) return\r\n      map(this.chats, function (chat) {\r\n        if (chat.chatID === data.chat.chatID) {\r\n          chat.text = data.chat.text\r\n          chat.isEdited = true\r\n        }\r\n      })\r\n      map(this.privateChats, function (chat) {\r\n        if (chat.chatID === data.chat.chatID) {\r\n          chat.text = data.chat.text\r\n          chat.isEdited = true\r\n        }\r\n      })\r\n    })\r\n\r\n    // DELETE MESSAGE\r\n    this.socket.on('on-delete-message', (data) => {\r\n      if (!data.chat) return\r\n      const publicIndex = findIndex(this.chats, {chatID: data.chat.chatID})\r\n      const privateIndex = findIndex(this.privateChats, {\r\n        chatID: data.chat.chatID,\r\n      })\r\n\r\n      if (data?.chat?.isDeletedEveryone) {\r\n        if (publicIndex !== -1) {\r\n          this.chats.splice(publicIndex, 1)\r\n        } else if (privateIndex !== -1) {\r\n          this.privateChats.splice(privateIndex, 1)\r\n        }\r\n        this.fnDeleteReply({\r\n          chatID: data.chat.chatID,\r\n          deleteForSelf: false,\r\n          deleteForEveryone: true,\r\n          chats: privateIndex !== 1 ? this.privateChats : this.chats,\r\n        })\r\n      }\r\n    })\r\n\r\n    // TYPING MESSAGE\r\n    this.socket.on('on-typing-message-v2', (data) => {\r\n      this.usersTyping = data\r\n        .filter(({ username, channelSlug }) => username && channelSlug === this.activeChannelSlug)\r\n        .map(({ username }) => username)\r\n    })\r\n\r\n    // SERVER LOGS\r\n    this.socket.on('logs', (data) => {\r\n      if (data.call === 'on-channel-user-online') {\r\n        this.publicMembers = data.payload.onlineUsers\r\n      }\r\n      console.log('SERVERLOGS', data)\r\n    })\r\n\r\n    this.socket.on('status-online', (data) => {\r\n      this.onlineMembers = data\r\n    })\r\n\r\n    this.clearLockerRoomDeletedManagers()\r\n\r\n    this.$root.$on('evtRtGetChannel', () => {\r\n      this.fnGetChannel()\r\n    })\r\n\r\n    this.channelActive = this.channel\r\n\r\n    this.$root.$on('evtRtIsTyping', (user) => {\r\n      this.fnTypingMessage({userName: user.userName, status: true})\r\n    })\r\n\r\n    this.$root.$on('evtRtDoneTyping', (user) => {\r\n      this.fnTypingMessage({userName: user.userName, status: false})\r\n    })\r\n    this.fnRetrievePageDetails()\r\n    this.fnRetrieveIsSupported()\r\n\r\n    // add set interval call to fix web socket issue\r\n    const instance = this\r\n    setInterval(() => {\r\n      instance.socket.emit('ping')\r\n    }, 1000)\r\n    // end of set Interval call\r\n  },\r\n  beforeDestroy() {\r\n    if (this.oldChannel) {\r\n      this.$root.$emit('evtReloadLockerRoom', this.oldChannel)\r\n    }\r\n    this.$root.$off('evtRtSendMessage')\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      clearLockerRoomDeletedManagers:\r\n        'locker-room/clearLockerRoomDeletedManagers',\r\n      clearChatDeleted: 'chats/clearChatDeleted',\r\n      setLockerRoomIsLoading: 'lockerRoom/setLockerRoomIsLoading',\r\n      clearSelectedGift: 'giphy/clearSelectedGif',\r\n    }),\r\n    async fnSendMessage(message, reply, media, mentionsUserIDs) {\r\n      try {\r\n        hideAll()\r\n        const chat = {\r\n          User: {\r\n            username: this.userName || 'FX1 User',\r\n            Avatar: this.userAvatar,\r\n            id: this.userID,\r\n          },\r\n          chatID: uuidv4(),\r\n          text: message,\r\n          channelSlug: this.activeChannelSlug,\r\n          lockerRoomSlug: this.$route.params.slug,\r\n          repliedTo: reply\r\n            ? {\r\n              User: {\r\n                username: reply?.name,\r\n                id: reply?.userID,\r\n              },\r\n              text: reply?.text,\r\n              gif: reply?.gif,\r\n              chatID: reply?.chatID,\r\n              Media: reply?.Media,\r\n            }\r\n            : null,\r\n          Media: media?.length ? media : null,\r\n          MentionedUserIDs: mentionsUserIDs,\r\n          gif: this.selectedGif\r\n        }\r\n        await this.socket.emit('send-message', chat, () => {\r\n        })\r\n\r\n        chat.localMedia = this.getMediaFilesLocal || null\r\n        chat.replyLocalMedia = reply?.localMedia || null\r\n\r\n        if (this.activeChat === 'public') {\r\n          this.chats.push(chat)\r\n        } else if (this.activeChat === 'private') {\r\n          this.privateChats.push(chat)\r\n        }\r\n\r\n        const LockerRoom = this.lockerRoom || this.lockerRoomProp\r\n        this.channelActive = LockerRoom.ChannelGroups[0].Channels[0]\r\n\r\n        this.$mixpanelClient.eventRoomtrackSendMessage({\r\n          LockerRoom,\r\n          game: this.game,\r\n          reply,\r\n        })\r\n\r\n        this.$nextTick(() => {\r\n          this.$root.$emit('evtRtScrollToBottom')\r\n        })\r\n\r\n        await this.clearSelectedGift()\r\n      } catch (error) {\r\n      } finally {\r\n        const input = document.querySelector('.chat-input')\r\n\r\n        input?.focus()\r\n      }\r\n    },\r\n    async fnEditMessage({chatID, text, repliedToChatID, Media}) {\r\n      await this.socket.emit(\r\n        'edit-message',\r\n        {\r\n          channelSlug: this.activeChannelSlug,\r\n          chatID,\r\n          text,\r\n          repliedToChatID,\r\n          Media,\r\n        },\r\n        () => {\r\n          // console.log(resp)\r\n        }\r\n      )\r\n    },\r\n    async fnDeleteMessage({chatID, deleteForSelf, deleteForEveryone}) {\r\n      const activeChat =\r\n        this.activeChat === 'public' ? this.chats : this.privateChats\r\n\r\n      await this.socket.emit(\r\n        'delete-message',\r\n        {\r\n          channelSlug: this.activeChannelSlug,\r\n          chatID,\r\n          isDeletedSelf: deleteForSelf,\r\n          isDeletedEveryone: deleteForEveryone,\r\n        },\r\n        () => {\r\n          this.fnDeleteReply({\r\n            chatID,\r\n            deleteForSelf,\r\n            deleteForEveryone,\r\n            activeChat,\r\n          })\r\n        }\r\n      )\r\n    },\r\n    fnConnectToChannel(slug) {\r\n      this.oldChannel = this.$route.params.channel || null\r\n      if (this.oldChannel) {\r\n        this.$root.$emit('evtReloadLockerRoom', this.oldChannel)\r\n      }\r\n      this.$store.dispatch('locker-room/setLockerRoomConnectingToChannel', true)\r\n      this.socket.emit(\r\n        'join-channel',\r\n        {\r\n          channelSlug:\r\n            this.activeChat === 'public'\r\n              ? this.channelSlug\r\n              : slug || this.privateChannel?.slug,\r\n        },\r\n        (/* resp */) => {\r\n          const lockerRoom = this.lockerRoomActive\r\n          const channel = this.activeChannelSlug\r\n          const params = {\r\n            lockerRoom,\r\n            channel,\r\n            pageName: 'Event room channel',\r\n            isLoggedIn: this.isLoggedIn,\r\n          }\r\n          this.$mixpanelClient.trackViewPage(params)\r\n\r\n          this.$store.dispatch(\r\n            'notification/clearActiveChannelNotification',\r\n            this.$route.params.channel\r\n          )\r\n          this.reloadUnreadChats()\r\n        }\r\n      )\r\n      this.$store.dispatch(\r\n        'locker-room/setLockerRoomConnectingToChannel',\r\n        false\r\n      )\r\n    },\r\n    async fnGetChannel() {\r\n      const slug = this.channelSlug\r\n      const {getChannel} = await this.$api.getChannel({slug})\r\n      this.channel = getChannel\r\n    },\r\n    async fnGetPrivateChannel(privateId) {\r\n      const id = privateId\r\n      const slug = this.privateChannel?.slug\r\n      const {getChannel} = slug\r\n        ? await this.$api.getChannel({slug})\r\n        : id\r\n          ? await this.$api.getChannel({id})\r\n          : null\r\n      this.$emit('setPrivateChannel', getChannel)\r\n      await this.$store.dispatch('locker-room/setLockerRoomPrivateChat', getChannel)\r\n      if (id && getChannel) {\r\n        this.fnConnectToChannel(getChannel?.slug)\r\n      }\r\n    },\r\n    async fnRetrievePageDetails() {\r\n      const slug = this.$route?.params?.slug\r\n      const slugChannel = this.channelSlug\r\n      const slugPrivateChannel = this.privateChannel?.slug\r\n\r\n      const params = {\r\n        channelSlug: this.channelSlug,\r\n      }\r\n      const privateParams = {\r\n        channelSlug: slugPrivateChannel,\r\n      }\r\n      // async await parallel\r\n      const [\r\n        {\r\n          getMessagesByChannelSlug: {items},\r\n        },\r\n        {getChannel},\r\n        {getLockerRoom},\r\n      ] = await Promise.all([\r\n        this.$api.getMessagesByChannelSlug(params),\r\n        this.$api.getChannel({slug: slugChannel}),\r\n        this.$api.getLockerRoom({slug}),\r\n      ])\r\n\r\n      if (slugPrivateChannel) {\r\n        const [\r\n          {getMessagesByChannelSlug: privateItems},\r\n          {getChannel: privateChannel},\r\n        ] = await Promise.all([\r\n          this.$api.getMessagesByChannelSlug(privateParams),\r\n          this.$api.getChannel({slug: slugPrivateChannel}),\r\n        ])\r\n        this.privateChats = privateItems.items\r\n        this.$emit('setPrivateChannel', privateChannel)\r\n        await this.$store.dispatch(\r\n          'locker-room/setLockerRoomPrivateChat',\r\n          privateChannel\r\n        )\r\n      }\r\n\r\n      const chats = []\r\n      chats.push(...items)\r\n\r\n      this.isSupported = getLockerRoom?.isSupported\r\n      this.channel = getChannel\r\n      this.lockerRoom = getLockerRoom\r\n      this.chats = chats\r\n      this.pageLoaded = true\r\n\r\n      await this.$store.dispatch(\r\n        'locker-room/setLockerRoomActive',\r\n        this.lockerRoom\r\n      )\r\n      this.lockerRoomReply = null\r\n    },\r\n    fnDeleteReply({chatID, deleteForEveryone, deleteForSelf, chats}) {\r\n      map(chats, function (data) {\r\n        if (data.repliedTo?.chatID === chatID) {\r\n          data.repliedTo = {\r\n            ...{\r\n              isDeletedEveryone: deleteForEveryone,\r\n              isDeletedSelf: deleteForSelf,\r\n            },\r\n            ...data.repliedTo,\r\n          }\r\n        }\r\n      })\r\n    },\r\n    fnTypingMessage({userName, status}) {\r\n      this.socket.emit(\r\n        'typing-message-v2',\r\n        {\r\n          channelSlug: this.activeChannelSlug,\r\n          userName,\r\n          isTyping: status,\r\n        },\r\n      )\r\n    },\r\n    async reloadUnreadChats() {\r\n      if (!this.isLoggedIn) return\r\n      const {\r\n        Me: {Supporting},\r\n      } = await this.$api.getMyProfileSupporting()\r\n\r\n      if (!Supporting) return\r\n      const initialCount = []\r\n      await Supporting?.map((data) => {\r\n        return initialCount.push({\r\n          slug: data.slug,\r\n          totalUnreadMessagesCount: data.totalUnreadMessagesCount,\r\n        })\r\n      })\r\n      await this.$store.dispatch(\r\n        'notification/setLockerRoomCount',\r\n        initialCount\r\n      )\r\n    },\r\n    async fnRetrieveIsSupported() {\r\n      try {\r\n        const {\r\n          getLockerRoom: {isSupported},\r\n        } = await this.$api.getLockerRoomIsSupported({\r\n          slug: this.$route.params?.slug,\r\n        })\r\n        this.isSupported = isSupported\r\n      } catch (error) {\r\n      } finally {\r\n        await this.setLockerRoomIsLoading(false)\r\n      }\r\n    },\r\n\r\n    fnLeavePrivateChat(data) {\r\n      this.$emit('setPrivateChannel', data)\r\n    },\r\n    signUp() {\r\n      this.$router.push('/signup?step=1')\r\n    },\r\n    changeStep(step) {\r\n      this.$emit('changeStep', step)\r\n    },\r\n    cancel() {\r\n      this.$emit('cancel')\r\n    },\r\n  },\r\n}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.xp-locker-room-channels {\r\n  height: 100%;\r\n}\r\n\r\n.show .unsupported {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 12px 16px;\r\n  position: absolute;\r\n  bottom: 0;\r\n\r\n  .unsupported-btn {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 40px;\r\n    background: #f85454;\r\n    color: $white;\r\n    cursor: pointer;\r\n    border-radius: 5px;\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  span {\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    font-size: 13px;\r\n    color: $dark-white;\r\n  }\r\n}\r\n</style>\r\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--2-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ChatBody.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--2-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ChatBody.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChatBody.vue?vue&type=template&id=79267fee&scoped=true&lang=pug&\"\nimport script from \"./ChatBody.vue?vue&type=script&lang=js&\"\nexport * from \"./ChatBody.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./ChatBody.vue?vue&type=style&index=0&id=79267fee&prod&lang=scss&scoped=true&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  \"79267fee\",\n  \"7b2ea0fa\"\n  \n)\n\nexport default component.exports","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--7-oneOf-1-3!../../../node_modules/sass-resources-loader/lib/loader.js??ref--7-oneOf-1-4!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ChatBody.vue?vue&type=style&index=0&id=79267fee&prod&lang=scss&scoped=true&\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add CSS to SSR context\nvar add = require(\"!../../../node_modules/vue-style-loader/lib/addStylesServer.js\").default\nmodule.exports.__inject__ = function (context) {\n  add(\"cc9f4f48\", content, true, context)\n};"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsniBA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}