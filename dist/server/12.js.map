{"version":3,"file":"12.js","sources":["webpack:///./components/organisms/Channels/ChatHistory.vue?68cd","webpack:///./scripts/messages/index.ts","webpack:///./components/organisms/Channels/ChatHistory.vue?54a6","webpack:///./components/organisms/Channels/ChatHistory.vue?5429","webpack:///./components/organisms/Channels/ChatHistory.vue?9ba7","webpack:///components/organisms/Channels/ChatHistory.vue","webpack:///./components/organisms/Channels/ChatHistory.vue?d18f","webpack:///./components/organisms/Channels/ChatHistory.vue"],"sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--7-oneOf-1-3!../../../node_modules/sass-resources-loader/lib/loader.js??ref--7-oneOf-1-4!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ChatHistory.vue?vue&type=style&index=0&id=7c238e64&prod&lang=scss&scoped=true&\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add CSS to SSR context\nvar add = require(\"!../../../node_modules/vue-style-loader/lib/addStylesServer.js\").default\nmodule.exports.__inject__ = function (context) {\n  add(\"a1ff9424\", content, true, context)\n};","import crypto from 'crypto'\r\n\r\nconsole.log('env', process.env.IVConfig)\r\n\r\nexport const decryptChannelKey = (\r\n  encryptedChannelKey: string,\r\n  encryptedUserKey: string\r\n): string => {\r\n  const iv = Buffer.from(process.env.IVConfig! || '65a2b862088509b122407245706fb715', 'hex')\r\n  const userKey = Buffer.from(encryptedUserKey, 'hex')\r\n\r\n  const decipher = crypto.createDecipheriv('aes256', userKey, iv)\r\n  const decryptedChannelKey =\r\n    decipher.update(encryptedChannelKey, 'hex', 'hex') + decipher.final('hex')\r\n\r\n  return decryptedChannelKey\r\n}\r\n\r\nexport const encryptMessage = (\r\n  decryptedChannelKey: string,\r\n  message: string\r\n): string => {\r\n  const messageCiper = crypto.createCipheriv(\r\n    'aes256',\r\n    Buffer.from(decryptedChannelKey, 'hex'),\r\n    Buffer.from(process.env.IVConfig! || '65a2b862088509b122407245706fb715', 'hex')\r\n  )\r\n  const encryptedMessage =\r\n    messageCiper.update(message, 'utf-8', 'hex') + messageCiper.final('hex')\r\n\r\n  return encryptedMessage\r\n}\r\n\r\nexport const decryptMessage = (\r\n  decryptedChannelKey: string,\r\n  encryptedMessage: string\r\n): string => {\r\n  const messageDecipher = crypto.createDecipheriv(\r\n    'aes256',\r\n    Buffer.from(Buffer.from(decryptedChannelKey, 'hex')),\r\n    Buffer.from(process.env.IVConfig! || '65a2b862088509b122407245706fb715', 'hex')\r\n  )\r\n  const decryptedMessage =\r\n    messageDecipher.update(encryptedMessage, 'hex', 'utf-8') +\r\n    messageDecipher.final('utf-8')\r\n\r\n  return decryptedMessage\r\n}\r\n","export * from \"-!../../../node_modules/vue-style-loader/index.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--7-oneOf-1-3!../../../node_modules/sass-resources-loader/lib/loader.js??ref--7-oneOf-1-4!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ChatHistory.vue?vue&type=style&index=0&id=7c238e64&prod&lang=scss&scoped=true&\"","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(false);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".xo-channel-chat-history[data-v-7c238e64]{padding:30px 30px 0;min-height:100%}@media screen and (max-width:767px){.xo-channel-chat-history[data-v-7c238e64]{padding:30px 30px 0 10px}}.xo-channel-chat-history[data-v-7c238e64] .infinite-loading-container{margin-bottom:20px}\", \"\"]);\n// Exports\nmodule.exports = ___CSS_LOADER_EXPORT___;\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"xo-channel-chat-history flex-column\",on:{\"contextmenu\":function($event){$event.preventDefault();}}},[((_vm.chats.length >= 10 && _vm.showInfiniteLoading) || !_vm.filteredLocalChats.length)?_c('infinite-loading',{attrs:{\"direction\":\"top\",\"distance\":300},on:{\"infinite\":_vm.fnRetrieveNextChats}},[_c('div',{attrs:{\"slot\":\"spinner\"},slot:\"spinner\"},[_c('XAChannelsChatLoader')],1),_c('div',{attrs:{\"slot\":\"no-more\"},slot:\"no-more\"}),_c('div',{attrs:{\"slot\":\"no-results\"},slot:\"no-results\"})]):_vm._e(),_vm._l((_vm.filteredAddedChats),function(addedChat,index){return _c('XMChannelsChatItem',{key:(index + \"-added-chat\"),attrs:{\"chat\":addedChat,\"scroll-to-bottom\":false}})}),_vm._l((_vm.filteredLocalChats),function(chat,index){return _c('XMChannelsChatItem',{key:(index + \"-chat\"),attrs:{\"chat\":chat,\"is-last\":index === _vm.filteredLocalChats.length - 1}})}),_c('XAChannelsTyping',{attrs:{\"users-typing\":_vm.usersTyping}})],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template lang=\"pug\">\r\n.xo-channel-chat-history.flex-column(@contextmenu.prevent=\"\")\r\n  infinite-loading(\r\n    direction=\"top\",\r\n    :distance=\"300\",\r\n    @infinite=\"fnRetrieveNextChats\",\r\n    v-if=\"(chats.length >= 10 && showInfiniteLoading) || !filteredLocalChats.length\"\r\n  )\r\n    div(slot=\"spinner\"): XAChannelsChatLoader\r\n    div(slot=\"no-more\")\r\n    div(slot=\"no-results\")\r\n  XMChannelsChatItem(\r\n    v-for=\"(addedChat, index) in filteredAddedChats\",\r\n    :key=\"`${index}-added-chat`\",\r\n    :chat=\"addedChat\",\r\n    :scroll-to-bottom=\"false\"\r\n  )\r\n  XMChannelsChatItem(\r\n    v-for=\"(chat, index) in filteredLocalChats\",\r\n    :key=\"`${index}-chat`\",\r\n    :chat=\"chat\",\r\n    :is-last=\"index === filteredLocalChats.length - 1\"\r\n  )\r\n  XAChannelsTyping(:users-typing=\"usersTyping\")\r\n</template>\r\n\r\n<script>\r\nimport { mapFields } from 'vuex-map-fields'\r\nimport { mapGetters } from 'vuex'\r\nimport { decryptChannelKey, decryptMessage } from '~/scripts/messages'\r\n\r\nexport default {\r\n  name: 'XOChannelsChatHistory',\r\n  components: {\r\n    XMChannelsChatItem: () =>\r\n      import('~/components/molecules/Channels/ChatItem'),\r\n    XAChannelsChatLoader: () =>\r\n      import('~/components/atoms/Channels/ChatLoader'),\r\n    XAChannelsTyping: () => import('~/components/atoms/Channels/Typing'),\r\n  },\r\n  props: {\r\n    cursored: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: true,\r\n    },\r\n    channel: {\r\n      type: Object,\r\n      required: false,\r\n      default: () => {},\r\n    },\r\n    isEncrypted: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false,\r\n    },\r\n    chats: { type: Array, default: () => [] },\r\n    showInfiniteLoading: { type: Boolean, default: false },\r\n    usersTyping: { type: Array, default: () => [] },\r\n  },\r\n  data() {\r\n    return {\r\n      cursor: 10,\r\n      addedChats: [],\r\n      localChats: this.chats || [],\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapFields('messages', ['messageNext']),\r\n    ...mapFields('user', ['userID', 'encryptionKey']),\r\n    ...mapGetters({\r\n      getChatDeletedForEveryone: 'chats/getChatDeletedForEveryone',\r\n      getChatDeletedForSelf: 'chats/getChatDeletedForSelf',\r\n    }),\r\n    filteredLocalChats() {\r\n      const deletedEveryoneChats = this.localChats.filter((x) => {\r\n        return (\r\n          !x?.isDeletedEveryone &&\r\n          !this.getChatDeletedForEveryone.includes(x?.chatID)\r\n        )\r\n      })\r\n\r\n      const deletedSelfChats = deletedEveryoneChats.filter((x) => {\r\n        if (x?.User?.id === this.userID) {\r\n          return (\r\n            !x?.isDeletedSelf && !this.getChatDeletedForSelf.includes(x?.chatID)\r\n          )\r\n        }\r\n\r\n        return x\r\n      })\r\n\r\n      return deletedSelfChats\r\n    },\r\n    filteredAddedChats() {\r\n      const deletedEveryoneChats = this.addedChats.filter((x) => {\r\n        return (\r\n          !x?.isDeletedEveryone &&\r\n          !this.getChatDeletedForEveryone.includes(x?.chatID)\r\n        )\r\n      })\r\n\r\n      const deletedSelfChats = deletedEveryoneChats.filter((x) => {\r\n        if (x?.User?.id === this.userID) {\r\n          return (\r\n            !x?.isDeletedSelf && !this.getChatDeletedForSelf.includes(x?.chatID)\r\n          )\r\n        }\r\n\r\n        return x\r\n      })\r\n\r\n      return deletedSelfChats\r\n    },\r\n  },\r\n  mounted() {\r\n    this.$root.$on('evtRtUpdateChatList', (chat) => {\r\n      const indexLocalChats = this.localChats.findIndex((x) => {\r\n        return x?.chatID === chat?.chatID\r\n      })\r\n\r\n      const indexAddedChats = this.addedChats.findIndex((x) => {\r\n        return x?.chatID === chat?.chatID\r\n      })\r\n\r\n      if (this.localChats[indexLocalChats]) {\r\n        this.localChats[indexLocalChats].text = chat?.text\r\n        this.localChats[indexLocalChats].isEdited = chat?.isEdited\r\n      }\r\n\r\n      if (this.addedChats[indexAddedChats]) {\r\n        this.addedChats[indexAddedChats].text = chat?.text\r\n        this.addedChats[indexAddedChats].isEdited = chat?.isEdited\r\n      }\r\n    })\r\n  },\r\n  methods: {\r\n    async fnRetrieveNextChats($state) {\r\n      try {\r\n        const params = {\r\n          channelSlug: this.$route.params.channel,\r\n          count: 10,\r\n          cursor: this.cursored ? this.cursor : 0,\r\n        }\r\n        const {\r\n          getMessagesByChannelSlug: { items, next },\r\n        } = await this.$api.getMessagesByChannelSlug(params)\r\n\r\n        this.cursor = next\r\n\r\n        const decryptedChannelKey = this.isEncrypted && decryptChannelKey(this.channel.EncryptionKey, this.encryptionKey)\r\n\r\n        if (items.length) {\r\n          const decryptedMessages = items.map((m) => {\r\n            if (this.isEncrypted) {\r\n              if (m.text) {\r\n                m.text = decryptMessage(decryptedChannelKey, m.text)\r\n              }\r\n\r\n              if (m.RepliedTo?.text) {\r\n                m.RepliedTo.text = decryptMessage(decryptedChannelKey, m.RepliedTo.text)\r\n              }\r\n            }\r\n\r\n            return m\r\n          })\r\n\r\n          if (this.filteredLocalChats.length) {\r\n            this.addedChats.unshift(...decryptedMessages)\r\n          } else {\r\n            this.localChats.unshift(...decryptedMessages)\r\n          }\r\n          $state?.loaded()\r\n          return\r\n        }\r\n        $state?.complete()\r\n      } catch (error) {\r\n        this.$toast.error(error.message, {\r\n          duration: 5000,\r\n          position: 'bottom-left',\r\n          className: 'fx1-error',\r\n          iconPack: 'mdi',\r\n          icon: 'alert-circle-outline',\r\n        })\r\n      }\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.xo-channel-chat-history::v-deep {\r\n  padding: 30px 30px 0px;\r\n  min-height: 100%;\r\n\r\n  @include max-width(767px) {\r\n    padding: 30px 30px 0px 10px;\r\n  }\r\n\r\n  .infinite-loading-container {\r\n    margin-bottom: 20px;\r\n  }\r\n}\r\n</style>\r\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--2-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ChatHistory.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--2-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ChatHistory.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChatHistory.vue?vue&type=template&id=7c238e64&scoped=true&lang=pug&\"\nimport script from \"./ChatHistory.vue?vue&type=script&lang=js&\"\nexport * from \"./ChatHistory.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./ChatHistory.vue?vue&type=style&index=0&id=7c238e64&prod&lang=scss&scoped=true&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  \"7c238e64\",\n  \"404f43f5\"\n  \n)\n\nexport default component.exports"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAIA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AAIA;AAKA;AAGA;AACA;AAEA;AAIA;AAKA;AAIA;AACA;;;;;;;;AC/CA;AAAA;AAAA;AAAA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACyBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3LA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}